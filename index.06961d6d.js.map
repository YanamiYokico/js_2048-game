{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.initialState = initialState ? initialState.map((row)=>[\n                ...row\n            ]) : null;\n        if (this.initialState) this.board = this.initialState.map((row)=>[\n                ...row\n            ]);\n        else this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let boardChanged = false;\n        for(let i = 0; i < 4; i++){\n            const origRow = [\n                ...this.board[i]\n            ];\n            const newRow = this.MergeOrigRow(origRow);\n            if (!this.ArraysEqual(origRow, newRow)) {\n                this.board[i] = newRow;\n                boardChanged = true;\n            }\n        }\n        if (boardChanged) {\n            this.addRandomTile();\n            this.CheckGameStatus();\n        }\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        let boardChanged = false;\n        for(let i = 0; i < 4; i++){\n            const origRow = [\n                ...this.board[i]\n            ];\n            const reversed = origRow.slice().reverse();\n            const newRow = this.MergeOrigRow(reversed).reverse();\n            if (!this.ArraysEqual(origRow, newRow)) {\n                this.board[i] = newRow;\n                boardChanged = true;\n            }\n        }\n        if (boardChanged) {\n            this.addRandomTile();\n            this.CheckGameStatus();\n        }\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        let boardChanged = false;\n        for(let col = 0; col < 4; col++){\n            const column = [];\n            for(let row = 0; row < 4; row++)column.push(this.board[row][col]);\n            const newCol = this.MergeOrigRow(column);\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== newCol[row]) {\n                this.board[row][col] = newCol[row];\n                boardChanged = true;\n            }\n        }\n        if (boardChanged) {\n            this.addRandomTile();\n            this.CheckGameStatus();\n        }\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        let boardChanged = false;\n        for(let col = 0; col < 4; col++){\n            const column = [];\n            for(let row = 0; row < 4; row++)column.push(this.board[row][col]);\n            const reversed = column.slice().reverse();\n            const newCol = this.MergeOrigRow(reversed).reverse();\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== newCol[row]) {\n                this.board[row][col] = newCol[row];\n                boardChanged = true;\n            }\n        }\n        if (boardChanged) {\n            this.addRandomTile();\n            this.CheckGameStatus();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board.map((row)=>[\n                ...row\n            ]);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    /**\n   * Resets the game.\n   */ restart(initialState = this.initialState) {\n        this.initialState = initialState ? initialState.map((row)=>[\n                ...row\n            ]) : null;\n        if (this.initialState) this.board = this.initialState.map((row)=>[\n                ...row\n            ]);\n        else this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    // Add your own methods here\n    addRandomTile() {\n        const emptCells = [];\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.board[i][j] === 0) emptCells.push({\n                x: i,\n                y: j\n            });\n        }\n        if (emptCells.length > 0) {\n            const { x: x, y: y } = emptCells[Math.floor(Math.random() * emptCells.length)];\n            this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    MergeOrigRow(row) {\n        const newRow = [\n            ...row\n        ];\n        for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1] && newRow[i] !== 0) {\n            newRow[i] *= 2;\n            this.score += newRow[i];\n            newRow[i + 1] = 0;\n        }\n        const merged = newRow.filter((n)=>n !== 0);\n        while(merged.length < 4)merged.push(0);\n        return merged;\n    }\n    CheckGameStatus() {\n        for (const row of this.board){\n            for (const cell of row)if (cell === 2048) {\n                this.status = \"win\";\n                return;\n            }\n        }\n        for (const row of this.board){\n            if (row.includes(0)) return;\n        }\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (i < 3 && this.board[i][j] === this.board[i + 1][j]) return;\n            if (j < 3 && this.board[i][j] === this.board[i][j + 1]) return;\n        }\n        this.status = \"lose\";\n    }\n    ArraysEqual(a, b) {\n        return a.length === b.length && a.every((val, i)=>val === b[i]);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nfunction $09e991522ca7e64e$var$renderBoard() {\n    const cells = $09e991522ca7e64e$var$gameField.querySelectorAll(\".field-cell\");\n    const board = $09e991522ca7e64e$var$game.getState();\n    cells.forEach((cell, index)=>{\n        const row = Math.floor(index / 4);\n        const col = index % 4;\n        const value = board[row][col];\n        cell.textContent = value === 0 ? \"\" : value;\n        cell.className = `field-cell field-cell--${value}`;\n    });\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$handleGameStatus() {\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === \"win\") {\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    } else if (gameStatus === \"lose\") {\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    }\n    if (gameStatus === \"playing\") {\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n    } else {\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n        $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n    }\n}\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$renderBoard();\n    $09e991522ca7e64e$var$handleGameStatus();\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n}\nfunction $09e991522ca7e64e$var$handleKeyPress(e) {\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$renderBoard();\n    $09e991522ca7e64e$var$handleGameStatus();\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n$09e991522ca7e64e$var$renderBoard();\n\n\n//# sourceMappingURL=index.06961d6d.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\nconst gameField = document.querySelector('.game-field');\nconst scoreElement = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nfunction renderBoard() {\n  const cells = gameField.querySelectorAll('.field-cell');\n  const board = game.getState();\n\n  cells.forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const value = board[row][col];\n\n    cell.textContent = value === 0 ? '' : value;\n    cell.className = `field-cell field-cell--${value}`;\n  });\n\n  scoreElement.textContent = game.getScore();\n}\n\nfunction handleGameStatus() {\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === 'win') {\n    messageWin.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    messageStart.classList.add('hidden');\n  } else if (gameStatus === 'lose') {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageStart.classList.add('hidden');\n  } else {\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messageStart.classList.add('hidden');\n  }\n\n  if (gameStatus === 'playing') {\n    startButton.textContent = 'Restart';\n    startButton.classList.add('restart');\n    startButton.classList.remove('start');\n  } else {\n    startButton.textContent = 'Start';\n    startButton.classList.add('start');\n    startButton.classList.remove('restart');\n  }\n}\n\nfunction startGame() {\n  game.restart();\n  game.start();\n  renderBoard();\n  handleGameStatus();\n\n  startButton.textContent = 'Restart';\n}\n\nfunction handleKeyPress(e) {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  renderBoard();\n  handleGameStatus();\n}\n\nstartButton.addEventListener('click', startGame);\ndocument.addEventListener('keydown', handleKeyPress);\n\nrenderBoard();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.initialState = initialState\n      ? initialState.map((row) => [...row])\n      : null;\n\n    if (this.initialState) {\n      this.board = this.initialState.map((row) => [...row]);\n    } else {\n      this.board = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n    }\n\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let boardChanged = false;\n\n    for (let i = 0; i < 4; i++) {\n      const origRow = [...this.board[i]];\n      const newRow = this.MergeOrigRow(origRow);\n\n      if (!this.ArraysEqual(origRow, newRow)) {\n        this.board[i] = newRow;\n        boardChanged = true;\n      }\n    }\n\n    if (boardChanged) {\n      this.addRandomTile();\n      this.CheckGameStatus();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let boardChanged = false;\n\n    for (let i = 0; i < 4; i++) {\n      const origRow = [...this.board[i]];\n      const reversed = origRow.slice().reverse();\n      const newRow = this.MergeOrigRow(reversed).reverse();\n\n      if (!this.ArraysEqual(origRow, newRow)) {\n        this.board[i] = newRow;\n        boardChanged = true;\n      }\n    }\n\n    if (boardChanged) {\n      this.addRandomTile();\n      this.CheckGameStatus();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let boardChanged = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = [];\n\n      for (let row = 0; row < 4; row++) {\n        column.push(this.board[row][col]);\n      }\n\n      const newCol = this.MergeOrigRow(column);\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newCol[row]) {\n          this.board[row][col] = newCol[row];\n          boardChanged = true;\n        }\n      }\n    }\n\n    if (boardChanged) {\n      this.addRandomTile();\n      this.CheckGameStatus();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let boardChanged = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = [];\n\n      for (let row = 0; row < 4; row++) {\n        column.push(this.board[row][col]);\n      }\n\n      const reversed = column.slice().reverse();\n      const newCol = this.MergeOrigRow(reversed).reverse();\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newCol[row]) {\n          this.board[row][col] = newCol[row];\n          boardChanged = true;\n        }\n      }\n    }\n\n    if (boardChanged) {\n      this.addRandomTile();\n      this.CheckGameStatus();\n    }\n  }\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart(initialState = this.initialState) {\n    this.initialState = initialState\n      ? initialState.map((row) => [...row])\n      : null;\n\n    if (this.initialState) {\n      this.board = this.initialState.map((row) => [...row]);\n    } else {\n      this.board = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n    }\n\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  // Add your own methods here\n  addRandomTile() {\n    const emptCells = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          emptCells.push({\n            x: i, y: j,\n          });\n        }\n      }\n    }\n\n    if (emptCells.length > 0) {\n      const { x, y } = emptCells[Math.floor(Math.random() * emptCells.length)];\n\n      this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  MergeOrigRow(row) {\n    const newRow = [...row];\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1] && newRow[i] !== 0) {\n        newRow[i] *= 2;\n        this.score += newRow[i];\n        newRow[i + 1] = 0;\n      }\n    }\n\n    const merged = newRow.filter((n) => n !== 0);\n\n    while (merged.length < 4) {\n      merged.push(0);\n    }\n\n    return merged;\n  }\n\n  CheckGameStatus() {\n    for (const row of this.board) {\n      for (const cell of row) {\n        if (cell === 2048) {\n          this.status = 'win';\n\n          return;\n        }\n      }\n    }\n\n    for (const row of this.board) {\n      if (row.includes(0)) {\n        return;\n      }\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (i < 3 && this.board[i][j] === this.board[i + 1][j]) {\n          return;\n        }\n\n        if (j < 3 && this.board[i][j] === this.board[i][j + 1]) {\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n\n  ArraysEqual(a, b) {\n    return a.length === b.length && a.every((val, i) => val === b[i]);\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","map","row","board","score","status","moveLeft","boardChanged","i","origRow","newRow","MergeOrigRow","ArraysEqual","addRandomTile","CheckGameStatus","moveRight","reversed","slice","reverse","moveUp","col","column","push","newCol","moveDown","getScore","getState","getStatus","start","restart","emptCells","j","x","y","length","Math","floor","random","merged","filter","n","cell","includes","a","b","every","val","$09e991522ca7e64e$var$gameField","document","querySelector","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$renderBoard","cells","querySelectorAll","forEach","index","value","textContent","className","$09e991522ca7e64e$var$handleGameStatus","gameStatus","classList","remove","add","addEventListener","e","key"],"version":3,"file":"index.06961d6d.js.map"}